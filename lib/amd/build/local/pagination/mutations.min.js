define("core/local/pagination/mutations",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;return _exports.default=
/**
   * Paged data mutations
   *
   * @module     core/local/pagination/mutations
   * @copyright  2023 Laurent David <laurent.david@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class{constructor(renderPagesContentCallback){this.renderPagesContentCallback=renderPagesContentCallback}async pageChange(stateManager,direction){stateManager.setReadOnly(!1);const state=stateManager.state,currentPage=state.pages.find((page=>page.active));if(!state.config.totalPages){const currentPageSize=state.config.itemsPerPage.find((item=>item.active)).value,newPageNumber=state.pages.size+1;state.pages.add({id:newPageNumber,pageNumber:newPageNumber,offset:0,limit:currentPageSize,active:!1,content:""})}const totalPages=state.config.totalPages?state.config.totalPages:state.pages.size;let nextPageNumber="next"===direction?currentPage.pageNumber+1:currentPage.pageNumber-1;nextPageNumber>totalPages&&(nextPageNumber=totalPages),nextPageNumber<1&&(nextPageNumber=1),state.pages.forEach((page=>{page.active=page.pageNumber===nextPageNumber})),await this._updatePages(state,this.renderPagesContentCallback),stateManager.setReadOnly(!0)}async pageLoadsContent(stateManager,pageNumber){stateManager.setReadOnly(!1);const state=stateManager.state;state.pages.find((page=>page.pageNumber===pageNumber)).content="",await this._updatePages(state,this.renderPagesContentCallback),stateManager.setReadOnly(!0)}async changePageSize(stateManager,limit){stateManager.setReadOnly(!1);const state=stateManager.state;state.config.itemsPerPage.forEach((item=>{item.active=item.value===limit})),state.config.totalPages=0,state.pages=[{id:1,pageNumber:1,offset:0,limit:limit,active:!0,content:""}],await this._updatePages(state,this.renderPagesContentCallback),stateManager.setReadOnly(!0)}async _updatePages(state,renderPagesContentCallback){const contentPromises=await renderPagesContentCallback(state.pages,{allItemsLoaded:async currentPage=>{state.config.totalPages=Math.max(currentPage,state.config.totalPages)}}),contentArray=await Promise.all(contentPromises),pageKeyIterator=state.pages.keys();contentArray.forEach((content=>{const pageKey=pageKeyIterator.next().value,page=state.pages.get(pageKey);""===page.content&&(page.content=content)}))}},_exports.default}));

//# sourceMappingURL=mutations.min.js.map