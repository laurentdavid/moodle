{"version":3,"file":"mutations.min.js","sources":["../../../src/local/pagination/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Paged data mutations\n *\n * @module     core/local/pagination/mutations\n * @copyright  2023 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * Constructor\n     * @param {CallableFunction} renderPagesContentCallback\n     */\n    constructor(renderPagesContentCallback) {\n        this.renderPagesContentCallback = renderPagesContentCallback;\n    }\n\n    /**\n     * Page changes\n     * @param {StateManager} stateManager\n     * @param {string} direction\n     **/\n    async pageChange(stateManager, direction) {\n        // Get the state data from the state manager.\n        stateManager.setReadOnly(false);\n        const state = stateManager.state;\n        const currentPage = state.pages.find((page) => page.active);\n        if (!state.config.totalPages) {\n            const currentPageSize = state.config.itemsPerPage.find((item) => item.active).value;\n            const newPageNumber = state.pages.size + 1;\n            state.pages.add({\n                id: newPageNumber,\n                pageNumber: newPageNumber,\n                offset: 0,\n                limit: currentPageSize,\n                active: false,\n                content: \"\"\n            });\n        }\n        const totalPages = state.config.totalPages ? state.config.totalPages : state.pages.size;\n        let nextPageNumber = direction === 'next' ? currentPage.pageNumber + 1 : currentPage.pageNumber - 1;\n        if (nextPageNumber > totalPages) {\n            nextPageNumber = totalPages;\n        }\n        if (nextPageNumber < 1) {\n            nextPageNumber = 1;\n        }\n        state.pages.forEach((page) => {\n            page.active = page.pageNumber === nextPageNumber;\n        });\n        await this._updatePages(state, this.renderPagesContentCallback);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Page load\n     * @param {StateManager} stateManager\n     * @param {number} pageNumber\n     **/\n    async pageLoadsContent(stateManager, pageNumber) {\n        // Get the state data from the state manager.\n        stateManager.setReadOnly(false);\n        const state = stateManager.state;\n        const currentPage = state.pages.find((page) => page.pageNumber === pageNumber);\n        currentPage.content = \"\";\n        await this._updatePages(state, this.renderPagesContentCallback);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Page change size\n     * @param {StateManager} stateManager\n     * @param {number} limit\n     **/\n    async changePageSize(stateManager, limit) {\n        stateManager.setReadOnly(false);\n        const state = stateManager.state;\n        state.config.itemsPerPage.forEach((item) => {\n            item.active = (item.value === limit);\n        });\n        state.config.totalPages = 0;\n        // Reload the pages.\n        state.pages = [{\n            id: 1,\n            pageNumber: 1,\n            offset: 0,\n            limit: limit,\n            active: true,\n            content: \"\",\n        }];\n        await this._updatePages(state, this.renderPagesContentCallback);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update pages\n     * @param {object} state\n     * @param {CallableFunction} renderPagesContentCallback\n     **/\n    async _updatePages(state, renderPagesContentCallback) {\n        const contentPromises = await renderPagesContentCallback(state.pages, {\n            allItemsLoaded: async (currentPage) => {\n                state.config.totalPages = Math.max(currentPage, state.config.totalPages);\n            }\n        });\n        const contentArray = await Promise.all(contentPromises);\n        const pageKeyIterator = state.pages.keys();\n        contentArray.forEach((content) => {\n            const pageKey = pageKeyIterator.next().value;\n            const page = state.pages.get(pageKey);\n            if (page.content === \"\") {\n                page.content = content;\n            }\n        });\n    }\n}"],"names":["constructor","renderPagesContentCallback","stateManager","direction","setReadOnly","state","currentPage","pages","find","page","active","config","totalPages","currentPageSize","itemsPerPage","item","value","newPageNumber","size","add","id","pageNumber","offset","limit","content","nextPageNumber","forEach","this","_updatePages","contentPromises","allItemsLoaded","async","Math","max","contentArray","Promise","all","pageKeyIterator","keys","pageKey","next","get"],"mappings":";;;;;;;;MA2BIA,YAAYC,iCACHA,2BAA6BA,4CAQrBC,aAAcC,WAE3BD,aAAaE,aAAY,SACnBC,MAAQH,aAAaG,MACrBC,YAAcD,MAAME,MAAMC,MAAMC,MAASA,KAAKC,aAC/CL,MAAMM,OAAOC,WAAY,OACpBC,gBAAkBR,MAAMM,OAAOG,aAAaN,MAAMO,MAASA,KAAKL,SAAQM,MACxEC,cAAgBZ,MAAME,MAAMW,KAAO,EACzCb,MAAME,MAAMY,IAAI,CACZC,GAAIH,cACJI,WAAYJ,cACZK,OAAQ,EACRC,MAAOV,gBACPH,QAAQ,EACRc,QAAS,WAGXZ,WAAaP,MAAMM,OAAOC,WAAaP,MAAMM,OAAOC,WAAaP,MAAME,MAAMW,SAC/EO,eAA+B,SAAdtB,UAAuBG,YAAYe,WAAa,EAAIf,YAAYe,WAAa,EAC9FI,eAAiBb,aACjBa,eAAiBb,YAEjBa,eAAiB,IACjBA,eAAiB,GAErBpB,MAAME,MAAMmB,SAASjB,OACjBA,KAAKC,OAASD,KAAKY,aAAeI,wBAEhCE,KAAKC,aAAavB,MAAOsB,KAAK1B,4BACpCC,aAAaE,aAAY,0BAQNF,aAAcmB,YAEjCnB,aAAaE,aAAY,SACnBC,MAAQH,aAAaG,MACPA,MAAME,MAAMC,MAAMC,MAASA,KAAKY,aAAeA,aACvDG,QAAU,SAChBG,KAAKC,aAAavB,MAAOsB,KAAK1B,4BACpCC,aAAaE,aAAY,wBAQRF,aAAcqB,OAC/BrB,aAAaE,aAAY,SACnBC,MAAQH,aAAaG,MAC3BA,MAAMM,OAAOG,aAAaY,SAASX,OAC/BA,KAAKL,OAAUK,KAAKC,QAAUO,SAElClB,MAAMM,OAAOC,WAAa,EAE1BP,MAAME,MAAQ,CAAC,CACXa,GAAI,EACJC,WAAY,EACZC,OAAQ,EACRC,MAAOA,MACPb,QAAQ,EACRc,QAAS,WAEPG,KAAKC,aAAavB,MAAOsB,KAAK1B,4BACpCC,aAAaE,aAAY,sBAQVC,MAAOJ,kCAChB4B,sBAAwB5B,2BAA2BI,MAAME,MAAO,CAClEuB,eAAgBC,MAAAA,cACZ1B,MAAMM,OAAOC,WAAaoB,KAAKC,IAAI3B,YAAaD,MAAMM,OAAOC,eAG/DsB,mBAAqBC,QAAQC,IAAIP,iBACjCQ,gBAAkBhC,MAAME,MAAM+B,OACpCJ,aAAaR,SAASF,gBACZe,QAAUF,gBAAgBG,OAAOxB,MACjCP,KAAOJ,MAAME,MAAMkC,IAAIF,SACR,KAAjB9B,KAAKe,UACLf,KAAKe,QAAUA"}