{"version":3,"file":"factory.min.js","sources":["../../../src/local/pagination/factory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Paged content factory\n *\n * @module     core/local/pagination/factory\n * @copyright  2023 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getPagedContentReactive} from \"./paged_content_reactive\";\nimport $ from 'jquery';\nimport {DEFAULT} from \"./defaults\";\nimport PagedContentComponent from \"./paged_content\";\nimport PagedContentMutations from \"./mutations\";\n\n/**\n * Create a paged content widget where the complete list of items is not loaded\n * up front but will instead be loaded by an ajax request (or similar).\n *\n * The client code must provide a callback function which loads and renders the\n * items for each page. See PagedContent.init for more details.\n *\n * The function will return a deferred that is resolved with a jQuery object\n * for the HTML content and a string for the JavaScript.\n *\n * The current list of configuration options available are:\n *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\n *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\n *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\n *      controlPlacementBottom {bool} Render controls under paged content (default to false)\n *\n * @param  {int|null} numberOfItems How many items are there in total.\n * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\n * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\n * @param  {object} config  Configuration options provided by the client.\n * @return {Promise} Resolved with jQuery HTML and string JS.\n */\nexport const createWithTotalAndLimit = (numberOfItems, itemsPerPage, renderPagesContentCallback, config) => {\n\n    let templateContext = {... DEFAULT.DEFAULT_PAGE_CONTEXT };\n    if (config.hasOwnProperty('controlPlacementBottom')) {\n        templateContext.controlplacementbottom = config.controlPlacementBottom;\n    }\n    var deferred = $.Deferred();\n\n    // Create a random id for the element.\n    let id = 'paged-content-' + Math.floor(Math.random() * 1000000);\n    // Set the id to the custom namespace provided\n    if (config.hasOwnProperty('eventNamespace')) {\n        id = config.eventNamespace;\n    }\n    templateContext.pagecontainerid = id;\n    // Initialise the reactive component.\n    const reactive = getPagedContentReactive(id);\n    const defaultLimit = (itemsPerPage ? itemsPerPage : DEFAULT.DEFAULT_ITEMS_PER_PAGE).find((item) => item.active).value;\n    reactive.setInitialState({\n        config: {\n            numberOfItems: numberOfItems,\n            itemsPerPage: itemsPerPage,\n            hasPagingBar: true,\n            totalPages: 0,\n            ...config\n        },\n        pages: [{\n            id: 1,\n            pageNumber: 1,\n            offset: 0,\n            limit: defaultLimit,\n            active: true,\n            content: \"\",\n        }],\n    });\n    reactive.setMutations(new PagedContentMutations(renderPagesContentCallback));\n    // Set up the mutation observer (Vanilla Javascript) so we can check whenever the paged content has been inserted.\n    const observer = new MutationObserver((mutations, observerInstance) => {\n        if (document.getElementById(id)) {\n            observerInstance.disconnect(); // Stop observing\n            PagedContentComponent.init(document.getElementById(id), []);\n        }\n    });\n    // We pas the renderPageContentCallback so we can then deal with data in the mutation controller.\n    Templates.renderForPromise('core/local/pagination/paged_content', templateContext).then(\n        ({html, js}) => {\n                deferred.resolve(html, js); // This will just call the deferred method and resolve the renderPagesContentCallback.\n        }).catch(Notification.exception);\n    // Start observing the document with the configured parameters\n    observer.observe(document.body, {childList: true, subtree: true});\n    return deferred.promise();\n};\n\n/**\n * Create a paged content widget where the complete list of items is not loaded\n * up front but will instead be loaded by an ajax request (or similar).\n *\n * The client code must provide a callback function which loads and renders the\n * items for each page. See PagedContent.init for more details.\n *\n * The function will return a deferred that is resolved with a jQuery object\n * for the HTML content and a string for the JavaScript.\n *\n * The current list of configuration options available are:\n *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\n *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\n *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\n *      controlPlacementBottom {bool} Render controls under paged content (default to false)\n *\n * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\n * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\n * @param  {object} config  Configuration options provided by the client.\n * @return {promise} Resolved with jQuery HTML and string JS.\n */\nexport const createWithLimit = (itemsPerPage, renderPagesContentCallback, config) => {\n    return createWithTotalAndLimit(null, itemsPerPage, renderPagesContentCallback, config);\n};\n"],"names":["createWithTotalAndLimit","numberOfItems","itemsPerPage","renderPagesContentCallback","config","templateContext","DEFAULT","DEFAULT_PAGE_CONTEXT","hasOwnProperty","controlplacementbottom","controlPlacementBottom","deferred","$","Deferred","id","Math","floor","random","eventNamespace","pagecontainerid","reactive","defaultLimit","DEFAULT_ITEMS_PER_PAGE","find","item","active","value","setInitialState","hasPagingBar","totalPages","pages","pageNumber","offset","limit","content","setMutations","PagedContentMutations","observer","MutationObserver","mutations","observerInstance","document","getElementById","disconnect","init","renderForPromise","then","_ref","html","js","resolve","catch","Notification","exception","observe","body","childList","subtree","promise"],"mappings":";;;;;;;kXAqDaA,wBAA0B,CAACC,cAAeC,aAAcC,2BAA4BC,cAEzFC,gBAAkB,IAAKC,kBAAQC,sBAC/BH,OAAOI,eAAe,4BACtBH,gBAAgBI,uBAAyBL,OAAOM,4BAEhDC,SAAWC,gBAAEC,eAGbC,GAAK,iBAAmBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAExCb,OAAOI,eAAe,oBACtBM,GAAKV,OAAOc,gBAEhBb,gBAAgBc,gBAAkBL,SAE5BM,UAAW,mDAAwBN,IACnCO,cAAgBnB,cAA8BI,kBAAQgB,wBAAwBC,MAAMC,MAASA,KAAKC,SAAQC,MAChHN,SAASO,gBAAgB,CACrBvB,OAAQ,CACJH,cAAeA,cACfC,aAAcA,aACd0B,cAAc,EACdC,WAAY,KACTzB,QAEP0B,MAAO,CAAC,CACJhB,GAAI,EACJiB,WAAY,EACZC,OAAQ,EACRC,MAAOZ,aACPI,QAAQ,EACRS,QAAS,OAGjBd,SAASe,aAAa,IAAIC,mBAAsBjC,mCAE1CkC,SAAW,IAAIC,kBAAiB,CAACC,UAAWC,oBAC1CC,SAASC,eAAe5B,MACxB0B,iBAAiBG,oCACKC,KAAKH,SAASC,eAAe5B,IAAK,kCAItD+B,iBAAiB,sCAAuCxC,iBAAiByC,MAC/EC,WAACC,KAACA,KAADC,GAAOA,SACAtC,SAASuC,QAAQF,KAAMC,OAC5BE,MAAMC,sBAAaC,WAE1BhB,SAASiB,QAAQb,SAASc,KAAM,CAACC,WAAW,EAAMC,SAAS,IACpD9C,SAAS+C,6FAwBW,CAACxD,aAAcC,2BAA4BC,SAC/DJ,wBAAwB,KAAME,aAAcC,2BAA4BC"}