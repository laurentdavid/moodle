{"version":3,"file":"placement.min.js","sources":["../src/placement.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     aiplacement_modassist/placement\n * @copyright  2024 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport 'core/copy_to_clipboard';\nimport Notification from 'core/notification';\nimport Selectors from 'aiplacement_modassist/selectors';\nimport Policy from 'core_ai/policy';\nimport AIHelper from 'core_ai/helper';\nimport DrawerEvents from 'core/drawer_events';\nimport {subscribe} from 'core/pubsub';\nimport * as MessageDrawerHelper from 'core_message/message_drawer_helper';\nimport ModalForm from 'core_form/modalform';\nimport {getString} from 'core/str';\n\nconst AIModAssist = class {\n\n    /**\n     * The user ID.\n     * @type {Integer}\n     */\n    userId;\n    /**\n     * The context ID.\n     * @type {Integer}\n     */\n    contextId;\n\n    /**\n     * The current action\n     * @type {String}\n     */\n    currentAction;\n\n    /**\n     * Constructor.\n     * @param {Integer} userId The user ID.\n     * @param {Integer} contextId The context ID.\n     */\n    constructor(userId, contextId) {\n        this.userId = userId;\n        this.contextId = contextId;\n\n        this.aiDrawerElement = document.querySelector(Selectors.ELEMENTS.AIDRAWER);\n        this.aiDrawerBodyElement = document.querySelector(Selectors.ELEMENTS.AIDRAWER_BODY);\n        this.pageElement = document.querySelector(Selectors.ELEMENTS.PAGE);\n        this.currentAction = null;\n        this.registerEventListeners();\n    }\n\n    /**\n     * Register event listeners.\n     */\n    registerEventListeners() {\n        const actionButtons = document.querySelectorAll(Selectors.ACTIONS.RUN);\n        if (!actionButtons) {\n            return;\n        }\n        actionButtons.forEach((element) => {\n            element.addEventListener('click', async (event) => {\n                event.preventDefault();\n                this.toggleAIDrawer();\n                const isPolicyAccepted = await this.isPolicyAccepted();\n                if (!isPolicyAccepted) {\n                    // Display policy.\n                    this.displayPolicy();\n                    return;\n                }\n                const modalForm = new ModalForm({\n                    modalConfig: {\n                        title: getString('action', 'aiplacement_modassist'),\n                    },\n                    formClass: 'aiplacement_modassist\\\\form\\\\mod_assist_action_form',\n                    args: {\n                        userid: this.userId,\n                        action: element.dataset.actionSubtype,\n                        component: element.dataset.component,\n                        cmid: element.dataset.cmid\n                    },\n                    saveButtonText: getString('continue'),\n                });\n\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n                    if (event.detail.result) {\n                        // Notify the user that the action was successful.\n                        this.currentAction = element.dataset.actionSubtype;\n                        this.runAction(event.detail.actiondata);\n                    } else {\n                        this.currentAction = null;\n                        Notification.addNotification({\n                            type: 'error',\n                            message: event.detail.errors.join('<br>')\n                        });\n                    }\n                });\n                modalForm.show();\n            });\n        });\n\n        // Close AI drawer if message drawer is shown.\n        subscribe(DrawerEvents.DRAWER_SHOWN, () => {\n            if (this.isAIDrawerOpen()) {\n                this.closeAIDrawer();\n            }\n        });\n    }\n\n    /**\n     * Register event listeners for the policy.\n     */\n    registerPolicyEventListeners() {\n        const acceptAction = document.querySelector(Selectors.ACTIONS.ACCEPT);\n        const declineAction = document.querySelector(Selectors.ACTIONS.DECLINE);\n        if (acceptAction) {\n            acceptAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.acceptPolicy().then(() => {\n                    return this.runAction();\n                }).catch(Notification.exception);\n            });\n        }\n        if (declineAction) {\n            declineAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.closeAIDrawer();\n            });\n        }\n    }\n\n    /**\n     * Register event listeners for the error.\n     */\n    registerErrorEventListeners() {\n        const retryAction = document.querySelector(Selectors.ACTIONS.RETRY);\n        if (retryAction) {\n            retryAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.aiDrawerBodyElement.dataset.hasdata = '0';\n                this.runAction();\n            });\n        }\n    }\n\n    /**\n     * Register event listeners for the response.\n     */\n    registerResponseEventListeners() {\n        const regenerateAction = document.querySelector(Selectors.ACTIONS.REGENERATE);\n        if (regenerateAction) {\n            regenerateAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.aiDrawerBodyElement.dataset.hasdata = '0';\n                this.runAction();\n            });\n        }\n    }\n\n    registerLoadingEventListeners() {\n        const cancelAction = document.querySelector(Selectors.ACTIONS.CANCEL);\n        if (cancelAction) {\n            cancelAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.setRequestCancelled();\n                this.toggleAIDrawer();\n            });\n        }\n    }\n\n    /**\n     * Check if the AI drawer is open.\n     * @return {boolean} True if the AI drawer is open, false otherwise.\n     */\n    isAIDrawerOpen() {\n        return this.aiDrawerElement.classList.contains('show');\n    }\n\n    /**\n     * Check if the request is cancelled.\n     * @return {boolean} True if the request is cancelled, false otherwise.\n     */\n    isRequestCancelled() {\n        return this.aiDrawerBodyElement.dataset.cancelled === '1';\n    }\n\n    setRequestCancelled() {\n        this.aiDrawerBodyElement.dataset.cancelled = '1';\n    }\n\n    /**\n     * Open the AI drawer.\n     */\n    openAIDrawer() {\n        // Close message drawer if it is shown.\n        MessageDrawerHelper.hide();\n        this.aiDrawerElement.classList.add('show');\n        this.aiDrawerBodyElement.setAttribute('aria-live', 'polite');\n        if (!this.pageElement.classList.contains('show-drawer-right')) {\n            this.addPadding();\n        }\n        // Disable the summary button.\n        this.disableActionButton();\n    }\n\n    /**\n     * Close the AI drawer.\n     */\n    closeAIDrawer() {\n        this.aiDrawerElement.classList.remove('show');\n        this.aiDrawerBodyElement.removeAttribute('aria-live');\n        if (this.pageElement.classList.contains('show-drawer-right') && this.aiDrawerBodyElement.dataset.removepadding === '1') {\n            this.removePadding();\n        }\n        // Enable the summary button.\n        this.enableActionButton();\n    }\n\n    /**\n     * Toggle the AI drawer.\n     */\n    toggleAIDrawer() {\n        if (this.isAIDrawerOpen()) {\n            this.closeAIDrawer();\n        } else {\n            this.openAIDrawer();\n        }\n    }\n\n    /**\n     * Add padding to the page to make space for the AI drawer.\n     */\n    addPadding() {\n        this.pageElement.classList.add('show-drawer-right');\n        this.aiDrawerBodyElement.dataset.removepadding = '1';\n    }\n\n    /**\n     * Remove padding from the page.\n     */\n    removePadding() {\n        this.pageElement.classList.remove('show-drawer-right');\n        this.aiDrawerBodyElement.dataset.removepadding = '0';\n    }\n\n    /**\n     * Disable the relevant button.\n     */\n    disableActionButton() {\n        if (!this.currentAction) {\n            return;\n        }\n        const summaryButton = document.querySelector(Selectors.ACTIONS.RUN + '[data-action-subtype=\"' + this.currentAction + '\"]');\n        if (summaryButton) {\n            summaryButton.setAttribute('disabled', 1);\n        }\n    }\n\n    /**\n     * Enable the summary button and focus on it.\n     */\n    enableActionButton() {\n        if (!this.currentAction) {\n            return;\n        }\n        const summaryButton = document.querySelector(Selectors.ACTIONS.RUN + '[data-action-subtype=\"' + this.currentAction + '\"]');\n        if (summaryButton) {\n            summaryButton.removeAttribute('disabled');\n            summaryButton.focus();\n        }\n    }\n\n    /**\n     * Check if the policy is accepted.\n     * @return {bool} True if the policy is accepted, false otherwise.\n     */\n    async isPolicyAccepted() {\n        return await Policy.getPolicyStatus(this.userId);\n    }\n\n    /**\n     * Accept the policy.\n     * @return {Promise<Object>}\n     */\n    acceptPolicy() {\n        return Policy.acceptPolicy();\n    }\n\n    /**\n     * Check if the AI drawer has generated content or not.\n     * @return {boolean} True if the AI drawer has generated content, false otherwise.\n     */\n    hasGeneratedContent() {\n        return this.aiDrawerBodyElement.dataset.hasdata === '1';\n    }\n\n    /**\n     * Display the policy.\n     */\n    displayPolicy() {\n        Templates.render('core_ai/policyblock', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerPolicyEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the loading spinner.\n     */\n    displayLoading() {\n        Templates.render('aiplacement_modassist/loading', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerLoadingEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the summary.\n     * @param {Object} data The data used to run the query.\n     */\n    async runAction(data) {\n        if (!this.hasGeneratedContent()) {\n            // Display loading spinner.\n            this.displayLoading();\n            // Clear the drawer content to prevent sending some unnecessary content.\n            this.aiDrawerBodyElement.innerHTML = '';\n            const request = {\n                methodname: 'aiplacement_modassist_process_action',\n                args: {\n                    contextid: this.contextId,\n                    action: this.currentAction,\n                    data: JSON.stringify(data)\n                }\n            };\n            try {\n                const responseObj = await Ajax.call([request])[0];\n                if (responseObj.error) {\n                    this.displayError();\n                    return;\n                } else {\n                    if (!this.isRequestCancelled()) {\n                        // Replace double line breaks with <br> and with </p><p> for paragraphs.\n                        const generatedContent = AIHelper.replaceLineBreaks(responseObj.generatedcontent);\n                        this.displayResponse(generatedContent);\n                        return;\n                    } else {\n                        this.aiDrawerBodyElement.dataset.cancelled = '0';\n                    }\n                }\n            } catch (error) {\n                window.console.log(error);\n                this.displayError();\n            }\n        }\n    }\n\n    /**\n     * Display the response.\n     * @param {String} content The content to display.\n     */\n    displayResponse(content) {\n        Templates.render('aiplacement_modassist/response', {content: content}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.aiDrawerBodyElement.dataset.hasdata = '1';\n            this.registerResponseEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the error.\n     */\n    displayError() {\n        Templates.render('aiplacement_modassist/error', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerErrorEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Get the text content of the main region.\n     * @return {String} The text content.\n     */\n    getTextContent() {\n        const mainRegion = document.querySelector(Selectors.ELEMENTS.MAIN_REGION);\n        return mainRegion.innerText || mainRegion.textContent;\n    }\n};\n\nexport default AIModAssist;\n"],"names":["constructor","userId","contextId","aiDrawerElement","document","querySelector","Selectors","ELEMENTS","AIDRAWER","aiDrawerBodyElement","AIDRAWER_BODY","pageElement","PAGE","currentAction","registerEventListeners","actionButtons","querySelectorAll","ACTIONS","RUN","forEach","element","addEventListener","async","event","preventDefault","toggleAIDrawer","this","isPolicyAccepted","displayPolicy","modalForm","ModalForm","modalConfig","title","formClass","args","userid","action","dataset","actionSubtype","component","cmid","saveButtonText","events","FORM_SUBMITTED","detail","result","runAction","actiondata","addNotification","type","message","errors","join","show","DrawerEvents","DRAWER_SHOWN","isAIDrawerOpen","closeAIDrawer","registerPolicyEventListeners","acceptAction","ACCEPT","declineAction","DECLINE","e","acceptPolicy","then","catch","Notification","exception","registerErrorEventListeners","retryAction","RETRY","hasdata","registerResponseEventListeners","regenerateAction","REGENERATE","registerLoadingEventListeners","cancelAction","CANCEL","setRequestCancelled","classList","contains","isRequestCancelled","cancelled","openAIDrawer","MessageDrawerHelper","hide","add","setAttribute","addPadding","disableActionButton","remove","removeAttribute","removepadding","removePadding","enableActionButton","summaryButton","focus","Policy","getPolicyStatus","hasGeneratedContent","render","html","innerHTML","displayLoading","data","request","methodname","contextid","JSON","stringify","responseObj","Ajax","call","error","displayError","generatedContent","AIHelper","replaceLineBreaks","generatedcontent","displayResponse","window","console","log","content","getTextContent","mainRegion","MAIN_REGION","innerText","textContent"],"mappings":"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"}