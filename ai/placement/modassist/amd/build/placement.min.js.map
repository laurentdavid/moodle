{"version":3,"file":"placement.min.js","sources":["../src/placement.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     aiplacement_modassist/placement\n * @copyright  2024 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport 'core/copy_to_clipboard';\nimport Notification from 'core/notification';\nimport Selectors from 'aiplacement_modassist/selectors';\nimport Policy from 'core_ai/policy';\nimport AIHelper from 'core_ai/helper';\nimport DrawerEvents from 'core/drawer_events';\nimport {subscribe} from 'core/pubsub';\nimport * as MessageDrawerHelper from 'core_message/message_drawer_helper';\nimport ModalForm from 'core_form/modalform';\nimport {getString} from 'core/str';\n\nconst AIModAssist = class {\n\n    /**\n     * The user ID.\n     * @type {Integer}\n     */\n    userId;\n    /**\n     * The context ID.\n     * @type {Integer}\n     */\n    contextId;\n\n    /**\n     * The current action\n     * @type {String}\n     */\n    currentAction;\n    /**\n     * The current action data\n     * @type {String}\n     */\n    currentActionData;\n\n    /**\n     * The current generated content data\n     * @type {String}\n     */\n    currentGeneratedContent;\n\n    /**\n     * Constructor.\n     * @param {Integer} userId The user ID.\n     * @param {Integer} contextId The context ID.\n     */\n    constructor(userId, contextId) {\n        this.userId = userId;\n        this.contextId = contextId;\n\n        this.aiDrawerElement = document.querySelector(Selectors.ELEMENTS.AIDRAWER);\n        this.aiDrawerBodyElement = document.querySelector(Selectors.ELEMENTS.AIDRAWER_BODY);\n        this.pageElement = document.querySelector(Selectors.ELEMENTS.PAGE);\n        this.clearActions();\n        this.registerEventListeners();\n    }\n\n    /**\n     * Register event listeners.\n     */\n    registerEventListeners() {\n        const actionButtons = document.querySelectorAll(Selectors.ACTIONS.RUN);\n        if (!actionButtons) {\n            return;\n        }\n        actionButtons.forEach((element) => {\n            element.addEventListener('click', async(event) => {\n                event.preventDefault();\n                this.toggleAIDrawer();\n                const isPolicyAccepted = await this.isPolicyAccepted();\n                if (!isPolicyAccepted) {\n                    // Display policy.\n                    this.displayPolicy();\n                    return;\n                }\n                const modalForm = new ModalForm({\n                    modalConfig: {\n                        title: element.dataset.actionDescription,\n                    },\n                    formClass: 'aiplacement_modassist\\\\form\\\\mod_assist_action_form',\n                    args: {\n                        userid: this.userId,\n                        action: element.dataset.actionSubtype,\n                        component: element.dataset.component,\n                        cmid: element.dataset.cmid\n                    },\n                    saveButtonText: getString('continue'),\n                });\n\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n                    if (event.detail.result) {\n                        // Notify the user that the action was successful.\n                        this.setCurrentAction(element.dataset.actionSubtype, event.detail.actiondata);\n                        this.generateContent();\n                    } else {\n                        this.clearActions();\n                        Notification.addNotification({\n                            type: 'error',\n                            message: event.detail.errors.join('<br>')\n                        });\n                    }\n                });\n                modalForm.show();\n            });\n        });\n\n        // Close AI drawer if message drawer is shown.\n        subscribe(DrawerEvents.DRAWER_SHOWN, () => {\n            if (this.isAIDrawerOpen()) {\n                this.closeAIDrawer();\n            }\n        });\n    }\n\n    /**\n     * Register event listeners for the policy.\n     */\n    registerPolicyEventListeners() {\n        const acceptAction = document.querySelector(Selectors.ACTIONS.ACCEPT);\n        const declineAction = document.querySelector(Selectors.ACTIONS.DECLINE);\n        if (acceptAction) {\n            acceptAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.acceptPolicy().then(() => {\n                    return this.generateContent();\n                }).catch(Notification.exception);\n            });\n        }\n        if (declineAction) {\n            declineAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.closeAIDrawer();\n            });\n        }\n    }\n\n    /**\n     * Register event listeners for the error.\n     */\n    registerErrorEventListeners() {\n        const retryAction = document.querySelector(Selectors.ACTIONS.RETRY);\n        if (retryAction) {\n            retryAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.aiDrawerBodyElement.dataset.hasdata = '0';\n                this.generateContent();\n            });\n        }\n    }\n\n    /**\n     * Register event listeners for the response.\n     */\n    registerResponseEventListeners() {\n        const regenerateAction = document.querySelector(Selectors.ACTIONS.REGENERATE);\n        if (regenerateAction) {\n            regenerateAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.aiDrawerBodyElement.dataset.hasdata = '0';\n                this.generateContent();\n            });\n        }\n        const applyAction = document.querySelector(Selectors.ACTIONS.APPLY);\n        if (applyAction) {\n            applyAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.applyActions();\n            });\n        }\n    }\n\n    registerLoadingEventListeners() {\n        const cancelAction = document.querySelector(Selectors.ACTIONS.CANCEL);\n        if (cancelAction) {\n            cancelAction.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.setRequestCancelled();\n                this.toggleAIDrawer();\n            });\n        }\n    }\n\n    /**\n     * Check if the AI drawer is open.\n     * @return {boolean} True if the AI drawer is open, false otherwise.\n     */\n    isAIDrawerOpen() {\n        return this.aiDrawerElement.classList.contains('show');\n    }\n\n    /**\n     * Check if the request is cancelled.\n     * @return {boolean} True if the request is cancelled, false otherwise.\n     */\n    isRequestCancelled() {\n        return this.aiDrawerBodyElement.dataset.cancelled === '1';\n    }\n\n    setRequestCancelled() {\n        this.aiDrawerBodyElement.dataset.cancelled = '1';\n    }\n\n    /**\n     * Open the AI drawer.\n     */\n    openAIDrawer() {\n        // Close message drawer if it is shown.\n        MessageDrawerHelper.hide();\n        this.aiDrawerElement.classList.add('show');\n        this.aiDrawerBodyElement.setAttribute('aria-live', 'polite');\n        if (!this.pageElement.classList.contains('show-drawer-right')) {\n            this.addPadding();\n        }\n        // Disable the summary button.\n        this.disableActionButton();\n    }\n\n    /**\n     * Close the AI drawer.\n     */\n    closeAIDrawer() {\n        this.aiDrawerElement.classList.remove('show');\n        this.aiDrawerBodyElement.removeAttribute('aria-live');\n        if (this.pageElement.classList.contains('show-drawer-right') && this.aiDrawerBodyElement.dataset.removepadding === '1') {\n            this.removePadding();\n        }\n        // Enable the summary button.\n        this.enableActionButton();\n    }\n\n    /**\n     * Toggle the AI drawer.\n     */\n    toggleAIDrawer() {\n        if (this.isAIDrawerOpen()) {\n            this.closeAIDrawer();\n        } else {\n            this.openAIDrawer();\n        }\n    }\n\n    /**\n     * Add padding to the page to make space for the AI drawer.\n     */\n    addPadding() {\n        this.pageElement.classList.add('show-drawer-right');\n        this.aiDrawerBodyElement.dataset.removepadding = '1';\n    }\n\n    /**\n     * Remove padding from the page.\n     */\n    removePadding() {\n        this.pageElement.classList.remove('show-drawer-right');\n        this.aiDrawerBodyElement.dataset.removepadding = '0';\n    }\n\n    /**\n     * Disable the relevant button.\n     */\n    disableActionButton() {\n        const currentAction = this.getCurrentAction();\n        if (!currentAction) {\n            return;\n        }\n        const summaryButton = document.querySelector(\n            Selectors.ACTIONS.RUN + '[data-action-subtype=\"' + currentAction.action + '\"]'\n        );\n        if (summaryButton) {\n            summaryButton.setAttribute('disabled', 1);\n        }\n    }\n\n    /**\n     * Enable the summary button and focus on it.\n     */\n    enableActionButton() {\n        const currentAction = this.getCurrentAction();\n        if (!currentAction) {\n            return;\n        }\n        const summaryButton = document.querySelector(\n            Selectors.ACTIONS.RUN + '[data-action-subtype=\"' + currentAction.action + '\"]'\n        );\n        if (summaryButton) {\n            summaryButton.removeAttribute('disabled');\n            summaryButton.focus();\n        }\n    }\n\n    /**\n     * Check if the policy is accepted.\n     * @return {bool} True if the policy is accepted, false otherwise.\n     */\n    async isPolicyAccepted() {\n        return await Policy.getPolicyStatus(this.userId);\n    }\n\n    /**\n     * Accept the policy.\n     * @return {Promise<Object>}\n     */\n    acceptPolicy() {\n        return Policy.acceptPolicy();\n    }\n\n    /**\n     * Check if the AI drawer has generated content or not.\n     * @return {boolean} True if the AI drawer has generated content, false otherwise.\n     */\n    hasGeneratedContent() {\n        return this.aiDrawerBodyElement.dataset.hasdata === '1';\n    }\n\n    /**\n     * Display the policy.\n     */\n    displayPolicy() {\n        Templates.render('core_ai/policyblock', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerPolicyEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the loading spinner.\n     */\n    displayLoading() {\n        Templates.render('aiplacement_modassist/loading', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerLoadingEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the summary.\n     */\n    async generateContent() {\n        const currentAction = this.getCurrentAction();\n        if (!currentAction) {\n            return;\n        }\n        if (!this.hasGeneratedContent() && currentAction) {\n            // Display loading spinner.\n            this.displayLoading();\n            // Clear the drawer content to prevent sending some unnecessary content.\n            this.aiDrawerBodyElement.innerHTML = '';\n            const request = {\n                methodname: 'aiplacement_modassist_generate_content',\n                args: {\n                    contextid: this.contextId,\n                    action: currentAction.action,\n                    data: JSON.stringify(currentAction.actionData)\n                }\n            };\n            try {\n                const responseObj = await Ajax.call([request])[0];\n                this.aiDrawerBodyElement.dataset.rawGeneratedContent = \"\";\n                if (responseObj.error) {\n                    this.displayError();\n                    return;\n                } else {\n                    if (!this.isRequestCancelled()) {\n                        // Replace double line breaks with <br> and with </p><p> for paragraphs.\n                        this.aiDrawerBodyElement.dataset.rawGeneratedContent = responseObj.generatedcontent;\n                        const generatedContent = AIHelper.replaceLineBreaks(responseObj.generatedcontent);\n                        this.displayResponse(generatedContent);\n                        return;\n                    } else {\n                        this.aiDrawerBodyElement.dataset.cancelled = '0';\n                    }\n                }\n            } catch (error) {\n                window.console.log(error);\n                this.displayError();\n            }\n        }\n    }\n\n    async applyActions() {\n        const currentAction = this.getCurrentAction();\n        if (!currentAction) {\n            return;\n        }\n        if (this.hasGeneratedContent()) {\n            try {\n                this.displayLoading();\n                // Clear the drawer content to prevent sending some unnecessary content.\n                this.aiDrawerBodyElement.innerHTML = '';\n                const request = {\n                    methodname: 'aiplacement_modassist_process_response',\n                    args: {\n                        contextid: this.contextId,\n                        action: currentAction.action,\n                        generatedcontent: this.aiDrawerBodyElement.dataset.rawGeneratedContent\n                    }\n                };\n                const responseObj = await Ajax.call([request])[0];\n                if (responseObj.error) {\n                    this.displayError();\n                    return;\n                } else {\n                    Notification.addNotification({\n                        type: 'success',\n                        message: responseObj.message\n                    });\n                    window.location.reload();\n                }\n            } catch (error) {\n                window.console.log(error);\n                this.displayError();\n            }\n        }\n\n    }\n    /**\n     * Display the response.\n     * @param {String} content The content to display.\n     */\n    displayResponse(content) {\n        Templates.render('aiplacement_modassist/response', {content: content}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.aiDrawerBodyElement.dataset.hasdata = '1';\n            this.registerResponseEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Display the error.\n     */\n    displayError() {\n        Templates.render('aiplacement_modassist/error', {}).then((html) => {\n            this.aiDrawerBodyElement.innerHTML = html;\n            this.registerErrorEventListeners();\n            return;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Get the text content of the main region.\n     * @return {String} The text content.\n     */\n    getTextContent() {\n        const mainRegion = document.querySelector(Selectors.ELEMENTS.MAIN_REGION);\n        return mainRegion.innerText || mainRegion.textContent;\n    }\n\n    /**\n     * Finish the current action.\n     */\n    clearActions() {\n        this.aiDrawerBodyElement.dataset.currentAction = '';\n        this.aiDrawerBodyElement.dataset.currentActionData = '';\n    }\n\n    /**\n     * Set the current action.\n     * @param {String} action\n     * @param {Object} actionData\n     */\n    setCurrentAction(action, actionData) {\n        this.aiDrawerBodyElement.dataset.currentAction = action;\n        this.aiDrawerBodyElement.dataset.currentActionData = JSON.stringify(actionData);\n    }\n\n    /**\n     * Get current action.\n     * @return {{action: string, actionData: any}|null}\n     */\n    getCurrentAction() {\n        if (!this.aiDrawerBodyElement.dataset.currentAction) {\n            return null;\n        }\n        return {\n            action: this.aiDrawerBodyElement.dataset.currentAction,\n            actionData: JSON.parse(this.aiDrawerBodyElement.dataset.currentActionData)\n        };\n    }\n};\n\nexport default AIModAssist;\n"],"names":["constructor","userId","contextId","aiDrawerElement","document","querySelector","Selectors","ELEMENTS","AIDRAWER","aiDrawerBodyElement","AIDRAWER_BODY","pageElement","PAGE","clearActions","registerEventListeners","actionButtons","querySelectorAll","ACTIONS","RUN","forEach","element","addEventListener","async","event","preventDefault","toggleAIDrawer","this","isPolicyAccepted","displayPolicy","modalForm","ModalForm","modalConfig","title","dataset","actionDescription","formClass","args","userid","action","actionSubtype","component","cmid","saveButtonText","events","FORM_SUBMITTED","detail","result","setCurrentAction","actiondata","generateContent","addNotification","type","message","errors","join","show","DrawerEvents","DRAWER_SHOWN","isAIDrawerOpen","closeAIDrawer","registerPolicyEventListeners","acceptAction","ACCEPT","declineAction","DECLINE","e","acceptPolicy","then","catch","Notification","exception","registerErrorEventListeners","retryAction","RETRY","hasdata","registerResponseEventListeners","regenerateAction","REGENERATE","applyAction","APPLY","applyActions","registerLoadingEventListeners","cancelAction","CANCEL","setRequestCancelled","classList","contains","isRequestCancelled","cancelled","openAIDrawer","MessageDrawerHelper","hide","add","setAttribute","addPadding","disableActionButton","remove","removeAttribute","removepadding","removePadding","enableActionButton","currentAction","getCurrentAction","summaryButton","focus","Policy","getPolicyStatus","hasGeneratedContent","render","html","innerHTML","displayLoading","request","methodname","contextid","data","JSON","stringify","actionData","responseObj","Ajax","call","rawGeneratedContent","error","displayError","generatedcontent","generatedContent","AIHelper","replaceLineBreaks","displayResponse","window","console","log","location","reload","content","getTextContent","mainRegion","MAIN_REGION","innerText","textContent","currentActionData","parse"],"mappings":"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"}