{"version":3,"file":"selectpreset.min.js","sources":["../src/selectpreset.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {showApplyPresetsDialog} from \"./applypresets\";\nimport {call as fetchMany} from 'core/ajax';\nimport Notification from \"core/notification\";\n/**\n * Javascript module to control the form responsible for selecting a preset.\n *\n * @module      mod_data/selectpreset\n * @copyright   2021 Mihail Geshoski <mihail@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst selectors = {\n    presetRadioButton: 'input[name=\"fullname\"]',\n    selectPresetButton: 'input[name=\"selectpreset\"]',\n    selectedPresetRadioButton: 'input[name=\"fullname\"]:checked',\n};\n\n/**\n * Initialize module.\n */\nexport const init = () => {\n    const radioButton = document.querySelectorAll(selectors.presetRadioButton);\n\n    // Initialize the \"Use preset\" button properly.\n    disableUsePresetButton();\n\n    // Make sure that click events are redirected to the popup dialog\n    initUsePresetPopupDialog();\n    radioButton.forEach((elem) => {\n        elem.addEventListener('change', function(event) {\n            event.preventDefault();\n            // Enable the \"Use preset\" button when any of the radio buttons in the presets list is checked.\n            disableUsePresetButton();\n        });\n    });\n\n};\n\n/**\n * Decide whether to disable or not the \"Use preset\" button.\n * When there is no preset selected, the button should be displayed disabled; otherwise, it will appear enabled as a primary button.\n *\n * @method\n * @private\n */\nconst disableUsePresetButton = () => {\n    let selectPresetButton = document.querySelector(selectors.selectPresetButton);\n    const selectedRadioButton = document.querySelectorAll(selectors.selectedPresetRadioButton);\n\n    if (selectedRadioButton.length > 0) {\n        // There is one preset selected, so the button should be enabled.\n        selectPresetButton.removeAttribute('disabled');\n        selectPresetButton.classList.remove('btn-secondary');\n        selectPresetButton.classList.add('btn-primary');\n    } else {\n        // There is no any preset selected, so the button should be disabled.\n        selectPresetButton.setAttribute('disabled', true);\n        selectPresetButton.classList.remove('btn-primary');\n        selectPresetButton.classList.add('btn-secondary');\n    }\n};\n\n\nexport const initUsePresetPopupDialog = () => {\n    const selectPresetButton = document.querySelector(selectors.selectPresetButton);\n    selectPresetButton.addEventListener('click', event => {\n        let args = {\n            'cmid': selectPresetButton.dataset.cmid\n        };\n        let presetLabel = '';\n        if (selectPresetButton.dataset.presetName) {\n            args.presetname = selectPresetButton.dataset.presetName;\n            presetLabel = selectPresetButton.dataset.presetLabel;\n        } else {\n            const selectedRadioButton = document.querySelector(selectors.selectedPresetRadioButton);\n            args.presetname = selectedRadioButton.value;\n            if (selectedRadioButton.labels.length > 0) {\n                presetLabel = selectedRadioButton.labels[0].textContent;\n            }\n        }\n        event.preventDefault();\n        fetchMany([{methodname: 'mod_data_apply_preset_parameters', args}])[0].then(\n            (result) => {\n                let details = JSON.parse(result.details);\n                if (!details.needsMapping) {\n                    window.location.assign(details.url);\n                } else {\n                    details.presetLabel = presetLabel;\n                    showApplyPresetsDialog(details);\n                }\n                return true;\n            }\n        ).catch(Notification.exception);\n    });\n};\n\n"],"names":["selectors","radioButton","document","querySelectorAll","disableUsePresetButton","initUsePresetPopupDialog","forEach","elem","addEventListener","event","preventDefault","selectPresetButton","querySelector","length","removeAttribute","classList","remove","add","setAttribute","args","dataset","cmid","presetLabel","presetName","presetname","selectedRadioButton","value","labels","textContent","methodname","then","result","details","JSON","parse","needsMapping","window","location","assign","url","catch","Notification","exception"],"mappings":";;;;;;;8LA0BMA,4BACiB,yBADjBA,6BAEkB,6BAFlBA,oCAGyB,+CAMX,WACVC,YAAcC,SAASC,iBAAiBH,6BAG9CI,yBAGAC,2BACAJ,YAAYK,SAASC,OACjBA,KAAKC,iBAAiB,UAAU,SAASC,OACrCA,MAAMC,iBAENN,sCAaNA,uBAAyB,SACvBO,mBAAqBT,SAASU,cAAcZ,8BACpBE,SAASC,iBAAiBH,qCAE9Ba,OAAS,GAE7BF,mBAAmBG,gBAAgB,YACnCH,mBAAmBI,UAAUC,OAAO,iBACpCL,mBAAmBI,UAAUE,IAAI,iBAGjCN,mBAAmBO,aAAa,YAAY,GAC5CP,mBAAmBI,UAAUC,OAAO,eACpCL,mBAAmBI,UAAUE,IAAI,mBAK5BZ,yBAA2B,WAC9BM,mBAAqBT,SAASU,cAAcZ,8BAClDW,mBAAmBH,iBAAiB,SAASC,YACrCU,KAAO,MACCR,mBAAmBS,QAAQC,MAEnCC,YAAc,MACdX,mBAAmBS,QAAQG,WAC3BJ,KAAKK,WAAab,mBAAmBS,QAAQG,WAC7CD,YAAcX,mBAAmBS,QAAQE,gBACtC,OACGG,oBAAsBvB,SAASU,cAAcZ,qCACnDmB,KAAKK,WAAaC,oBAAoBC,MAClCD,oBAAoBE,OAAOd,OAAS,IACpCS,YAAcG,oBAAoBE,OAAO,GAAGC,aAGpDnB,MAAMC,gCACI,CAAC,CAACmB,WAAY,mCAAoCV,KAAAA,QAAQ,GAAGW,MAClEC,aACOC,QAAUC,KAAKC,MAAMH,OAAOC,gBAC3BA,QAAQG,cAGTH,QAAQV,YAAcA,qDACCU,UAHvBI,OAAOC,SAASC,OAAON,QAAQO,MAK5B,KAEbC,MAAMC,sBAAaC"}