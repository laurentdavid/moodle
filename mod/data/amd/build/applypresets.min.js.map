{"version":3,"file":"applypresets.min.js","sources":["../src/applypresets.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for applying presets.\n *\n * @module     mod_data/applypresets\n * @copyright  2022 Laurent David <laurent.david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from \"core/templates\";\nimport Modal from 'core/modal';\nimport {get_string as getString} from 'core/str';\nimport Notification from \"core/notification\";\n\n/**\n * Initialize module\n * @param {object} param\n * @param {object} param.mappingPageParams Information to build the Mapping button\n * @param {object} param.applyPresetParams Information to build the Apply Presets button\n * @param {string} param.presetLabel The actual preset label\n * @param {string} param.fieldsToCreate Fields to be created\n * @param {string} param.fieldsToUpdate Fields to be updated\n * @param {string} param.fieldsToDelete Fields to be deleted\n */\nexport const showApplyPresetsDialog = async({\n                                                 mappingPageParams,\n                                                 applyPresetParams,\n                                                 presetLabel,\n                                                 fieldsToCreate,\n                                                 fieldsToUpdate,\n                                                 fieldsToDelete,\n                                             }) => {\n    let title = '';\n    if (presetLabel) {\n        title = await getString('mapping:dialogtitle:usepreset', 'mod_data', presetLabel);\n    } else {\n        title = await getString('mapping:dialogtitle:import', 'mod_data');\n    }\n\n    let buttons, modalPromise;\n    const hideDialogCallback = function(event) {\n        this.hide();\n        event.preventDefault();\n        return false;\n    };\n    buttons = [\n        {\n            action: '#',\n            formid: 'cancelbtn',\n            label: await getString('cancel', 'moodle'),\n            onsubmit: hideDialogCallback\n        }];\n    if (mappingPageParams) {\n        buttons.push({\n            ...mappingPageParams\n        });\n    }\n    if (applyPresetParams) {\n        buttons.push({\n            ...applyPresetParams\n        });\n    }\n    modalPromise = Templates.render('mod_data/fields_mapping_modal', {\n        title: title,\n        fieldstocreate: fieldsToCreate,\n        fieldstoupdate: fieldsToUpdate,\n        fieldstodelete: fieldsToDelete,\n        buttons: buttons\n    });\n    modalPromise.then(function(html) {\n        return new Modal(html);\n    }).fail(Notification.exception)\n        .then((modal) => {\n            modal.show();\n            buttons.forEach((buttonConfig) => {\n                const attachmentPoint = modal.getAttachmentPoint()[0];\n                const buttonFormElement = attachmentPoint.querySelector('#' + buttonConfig.formid);\n                if (typeof buttonConfig.onsubmit !== 'undefined') {\n                    buttonFormElement.addEventListener('submit', buttonConfig.onsubmit.bind(modal));\n                }\n            });\n            return modal;\n        }).fail(Notification.exception);\n};\n"],"names":["async","buttons","modalPromise","mappingPageParams","applyPresetParams","presetLabel","fieldsToCreate","fieldsToUpdate","fieldsToDelete","title","action","formid","label","onsubmit","event","hide","preventDefault","push","Templates","render","fieldstocreate","fieldstoupdate","fieldstodelete","then","html","Modal","fail","Notification","exception","modal","show","forEach","buttonConfig","buttonFormElement","getAttachmentPoint","querySelector","addEventListener","bind"],"mappings":";;;;;;;4QAsCsCA,MAAAA,WAe9BC,QAASC,cAf2BC,kBACKA,kBADLC,kBAEKA,kBAFLC,YAGKA,YAHLC,eAIKA,eAJLC,eAKKA,eALLC,eAMKA,qBAEzCC,MAAQ,GAERA,MADAJ,kBACc,mBAAU,gCAAiC,WAAYA,mBAEvD,mBAAU,6BAA8B,YAS1DJ,QAAU,CACN,CACIS,OAAQ,IACRC,OAAQ,YACRC,YAAa,mBAAU,SAAU,UACjCC,SAVmB,SAASC,mBAC3BC,OACLD,MAAME,kBACC,KASPb,mBACAF,QAAQgB,KAAK,IACNd,oBAGPC,mBACAH,QAAQgB,KAAK,IACNb,oBAGXF,aAAegB,mBAAUC,OAAO,gCAAiC,CAC7DV,MAAOA,MACPW,eAAgBd,eAChBe,eAAgBd,eAChBe,eAAgBd,eAChBP,QAASA,UAEbC,aAAaqB,MAAK,SAASC,aAChB,IAAIC,eAAMD,SAClBE,KAAKC,sBAAaC,WAChBL,MAAMM,QACHA,MAAMC,OACN7B,QAAQ8B,SAASC,qBAEPC,kBADkBJ,MAAMK,qBAAqB,GACTC,cAAc,IAAMH,aAAarB,aACtC,IAA1BqB,aAAanB,UACpBoB,kBAAkBG,iBAAiB,SAAUJ,aAAanB,SAASwB,KAAKR,WAGzEA,SACRH,KAAKC,sBAAaC"}