{"version":3,"file":"recordings.min.js","sources":["../src/recordings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for handling actions in the plain recordings table.\n *\n * @module     mod_bigbluebuttonbn/recordings\n * @copyright  2025 Blindside Networks\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException, saveCancelPromise} from 'core/notification';\nimport {getString} from 'core/str';\nimport {sortTable} from './recordings_sorting';\nimport {setupPagination} from './recordings_pagination';\n\n/**\n * Handles an action (e.g., delete, publish, unpublish, lock, etc.) for a recording.\n *\n * @param {HTMLElement} element - The clicked action button.\n * @returns {Promise}\n */\nconst requestPlainAction = async(element) => {\n    const getDataFromAction = (element, dataType) => {\n        const dataElement = element.closest(`[data-${dataType}]`);\n        return dataElement ? dataElement.dataset[dataType] : null;\n    };\n\n    const elementData = element.dataset;\n    const payload = {\n        bigbluebuttonbnid: getDataFromAction(element, 'bbbid'),\n        recordingid: getDataFromAction(element, 'recordingid'),\n        additionaloptions: getDataFromAction(element, 'additionaloptions'),\n        action: elementData.action,\n    };\n\n    if (!payload.additionaloptions) {\n        payload.additionaloptions = {};\n    }\n    if (elementData.action === 'import') {\n        payload.additionaloptions.sourceid = getDataFromAction(element, 'source-instance-id') || 0;\n        payload.additionaloptions.bbbcourseid = getDataFromAction(element, 'source-course-id') || 0;\n    }\n    payload.additionaloptions = JSON.stringify(payload.additionaloptions);\n\n    if (element.dataset.requireConfirmation === \"1\") {\n        try {\n            await saveCancelPromise(\n                getString('confirm'),\n                await getRecordingConfirmationMessage(payload),\n                getString('ok', 'moodle'),\n            );\n        } catch {\n            return Promise.resolve();\n        }\n    }\n\n    return repository.updateRecording(payload)\n        .then(() => refreshPlainTable())\n        .catch(displayException);\n};\n\n/**\n * Generates a confirmation message for recording actions.\n *\n * @param {Object} data - The recording action data.\n * @returns {Promise<string>}\n */\nconst getRecordingConfirmationMessage = async(data) => {\n    const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\n    if (!playbackElement) {\n        return getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn');\n    }\n\n    const recordingType = await getString(\n        playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\n        'bigbluebuttonbn'\n    );\n\n    const confirmation = await getString(\n        `view_recording_${data.action}_confirmation`,\n        'bigbluebuttonbn',\n        recordingType\n    );\n\n    if (data.action === 'import') {\n        return confirmation;\n    }\n\n    const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\n    if (!associatedLinkCount || associatedLinkCount === \"0\") {\n        return confirmation;\n    }\n\n    const confirmationWarning = await getString(\n        associatedLinkCount === \"1\"\n            ? `view_recording_${data.action}_confirmation_warning_p`\n            : `view_recording_${data.action}_confirmation_warning_s`,\n        'bigbluebuttonbn',\n        associatedLinkCount\n    );\n\n    return `${confirmationWarning}\\n\\n${confirmation}`;\n};\n\n/**\n * Refreshes the plain recordings table by reloading the page.\n */\nconst refreshPlainTable = () => {\n    const refreshUrl = document.getElementById('bigbluebuttonbn_recordings_table')?.dataset?.refreshUrl;\n    if (refreshUrl) {\n        window.location.href = refreshUrl;\n    } else {\n        window.location.href = window.location.origin + window.location.pathname + window.location.search;\n    }\n};\n\n/**\n * Registers event listeners for table interactions.\n */\nconst setupTableInteractions = () => {\n    document.addEventListener('click', (e) => {\n        const actionButton = e.target.closest('.action-icon');\n        if (actionButton) {\n            e.preventDefault();\n            requestPlainAction(actionButton);\n            return;\n        }\n\n        const sortableHeader = e.target.closest(\".sortable-header\");\n        if (sortableHeader) {\n            e.preventDefault();\n            sortTable(sortableHeader.dataset.sort);\n        }\n    });\n};\n\n// Initialize table interactions and pagination\nsetupTableInteractions();\nsetupPagination();\n"],"names":["getRecordingConfirmationMessage","async","playbackElement","document","querySelector","data","recordingid","action","recordingType","dataset","imported","confirmation","associatedLinkCount","_document$querySelect","_document$querySelect2","links","confirmationWarning","refreshPlainTable","refreshUrl","getElementById","_document$getElementB","_document$getElementB2","window","location","href","origin","pathname","search","addEventListener","e","actionButton","target","closest","preventDefault","getDataFromAction","element","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","sourceid","bbbcourseid","JSON","stringify","requireConfirmation","Promise","resolve","repository","updateRecording","then","catch","displayException","requestPlainAction","sortableHeader","sort"],"mappings":";;;;;;;wBAiFMA,gCAAkCC,MAAAA,8DAC9BC,gBAAkBC,SAASC,mCAA4BC,KAAKC,kBAC7DJ,uBACM,2CAA4BG,KAAKE,wBAAuB,yBAG7DC,oBAAsB,kBACa,SAArCN,gBAAgBO,QAAQC,SAAsB,sBAAwB,iBACtE,mBAGEC,mBAAqB,2CACLN,KAAKE,wBACvB,kBACAC,kBAGgB,WAAhBH,KAAKE,cACEI,mBAGLC,kDAAsBT,SAASC,oCAA6BC,KAAKE,mBAAUF,KAAKC,+EAA1DO,sBAA0EJ,iDAA1EK,uBAAmFC,UAC1GH,qBAA+C,MAAxBA,2BACjBD,mBAGLK,0BAA4B,2CAENX,KAAKE,OADL,MAAxBK,yEAGA,kBACAA,qCAGMI,mCAA0BL,eAMlCM,kBAAoB,4DAChBC,yCAAaf,SAASgB,eAAe,qGAAxBC,sBAA6DX,iDAA7DY,uBAAsEH,WAErFI,OAAOC,SAASC,KADhBN,YAGuBI,OAAOC,SAASE,OAASH,OAAOC,SAASG,SAAWJ,OAAOC,SAASI,QAQ/FxB,SAASyB,iBAAiB,SAAUC,UAC1BC,aAAeD,EAAEE,OAAOC,QAAQ,mBAClCF,oBACAD,EAAEI,qBAtGahC,OAAAA,gBACjBiC,kBAAoB,CAACC,QAASC,kBAC1BC,YAAcF,QAAQH,wBAAiBI,sBACtCC,YAAcA,YAAY5B,QAAQ2B,UAAY,MAGnDE,YAAcH,QAAQ1B,QACtB8B,QAAU,CACZC,kBAAmBN,kBAAkBC,QAAS,SAC9C7B,YAAa4B,kBAAkBC,QAAS,eACxCM,kBAAmBP,kBAAkBC,QAAS,qBAC9C5B,OAAQ+B,YAAY/B,WAGnBgC,QAAQE,oBACTF,QAAQE,kBAAoB,IAEL,WAAvBH,YAAY/B,SACZgC,QAAQE,kBAAkBC,SAAWR,kBAAkBC,QAAS,uBAAyB,EACzFI,QAAQE,kBAAkBE,YAAcT,kBAAkBC,QAAS,qBAAuB,GAE9FI,QAAQE,kBAAoBG,KAAKC,UAAUN,QAAQE,mBAEP,MAAxCN,QAAQ1B,QAAQqC,8BAEN,oCACF,kBAAU,iBACJ9C,gCAAgCuC,UACtC,kBAAU,KAAM,WAEtB,aACSQ,QAAQC,UAIhBC,WAAWC,gBAAgBX,SAC7BY,MAAK,IAAMlC,sBACXmC,MAAMC,0BAkEHC,CAAmBxB,oBAIjByB,eAAiB1B,EAAEE,OAAOC,QAAQ,oBACpCuB,iBACA1B,EAAEI,mDACQsB,eAAe9C,QAAQ+C"}