define("tool_policy/policies-consent-manager",["exports","./repository","core/notification"],(function(_exports,Repository,_notification){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,Repository=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}
/**
   * Policies consent
   *
   * Derived from https://github.com/klaxit/cookie-consent
   * version 0.3.4
   *
   * @module    tool_policy/policy-consent-manager
   * @class     PoliciesConsentManager
   * @copyright 2022 - Laurent David <laurent.david@moodle.com>
   * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(Repository);const DEFAULT_SETTINGS={};return _exports.default=class{constructor(){let alloptions=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const{containerId:containerId,...otheroptions}=alloptions;this.options=Object.assign(DEFAULT_SETTINGS,otheroptions),this.container=document.getElementById(containerId),this.container.querySelectorAll(".tool_policy_action").forEach((element=>{const action=element.dataset.action,ACTION_DISPATCHER={"accept-selected":this.__acceptSelected,"reject-nonessential":this.__rejectNonEssential,"accept-all":this.__acceptAll};element.addEventListener("click",ACTION_DISPATCHER[action].bind(this))})),this.options.policyAgreed||this.open(),document.addEventListener("trigger-policy-popup",this.open.bind(this)),this.triggerCurrentPolicyStatus()}open(){this.container.querySelector(".policy-container").classList.remove("d-none")}close(){this.container.querySelector(".policy-container").classList.add("d-none")}emit(event){super.emit(event,this)}triggerCurrentPolicyStatus(){const policiesAcceptances=this.__getPoliciesAcceptance(!1,!1);document.dispatchEvent(new CustomEvent("grpd_policies_current_status",{detail:policiesAcceptances}))}__getPoliciesAcceptance(rejectNonMandatory,forceAcceptance){const policyAcceptance=[];return this.container.querySelectorAll(".policies-settings-container input.policy-checkbox").forEach((policyElement=>{const policyVersionKey=policyElement.dataset.id,mandatoryPolicy="1"===policyElement.dataset.mandatory;let accepted=mandatoryPolicy||policyElement.checked;rejectNonMandatory&&!mandatoryPolicy&&(accepted=!1),accepted=accepted||forceAcceptance;const acceptance={policyversionid:policyVersionKey,accepted:accepted};policyAcceptance.push(acceptance)})),policyAcceptance}__acceptSelected(){const policiesAcceptances=this.__getPoliciesAcceptance(!1,!1);this.__acceptPolicies(policiesAcceptances)}__rejectNonEssential(){const policiesAcceptances=this.__getPoliciesAcceptance(!0,!1);this.__acceptPolicies(policiesAcceptances)}__acceptAll(){const policiesAcceptances=this.__getPoliciesAcceptance(!1,!0);this.__acceptPolicies(policiesAcceptances)}__acceptPolicies(policiesAcceptances){this.__setRemotePolicyAcceptance(policiesAcceptances),document.dispatchEvent(new CustomEvent("grpd_policies_accepted",{detail:policiesAcceptances})),this.__resetPolicyUI(policiesAcceptances),this.close()}__setRemotePolicyAcceptance(policiesAcceptances){Repository.acceptPolicies(policiesAcceptances).catch(_notification.exception)}__resetPolicyUI(policiesAcceptances){this.container.querySelectorAll(".policies-settings-container input.policy-checkbox").forEach((policyElement=>{const policyAcceptanceFound=policiesAcceptances&&policiesAcceptances.find((elem=>elem.policyid==policyElement.dataset.id));policyAcceptanceFound&&(policyElement.value=policyElement.checked=policyAcceptanceFound.accepted)}))}},_exports.default}));

//# sourceMappingURL=policies-consent-manager.min.js.map